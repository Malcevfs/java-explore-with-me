{
	"info": {
		"_postman_id": "d0d5ff54-f664-4b91-bc51-115cef4b2a0e",
		"name": "Feauture rating",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26504484"
	},
	"item": [
		{
			"name": "Запрос события оценок нет",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test Event 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes count 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be 0').to.eql(0);",
							"});",
							"pm.test(\"Test dislikes count 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 0').to.eql(0);",
							"});",
							"pm.test(\"Test initiator id 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test initiator rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.rate, '\"rate\" must be 0.0').to.eql(0.0);",
							"});",
							"pm.test(\"Test event rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.rate, '\"rate\" must be 0.0').to.eql(0.0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление дизлайка событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test likes 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes 'eventId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes 'userId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('userId');",
							"    pm.expect(jsonData.userId, '\"userId\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test likes 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be false').to.eql(false);",
							"});",
							"pm.test(\"Test likes 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be true').to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?dislike=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"rate"
					],
					"query": [
						{
							"key": "like",
							"value": "true",
							"disabled": true
						},
						{
							"key": "dislike",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос события . Поставлена оценка событию дизлайк",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test Event 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes count 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be 0').to.eql(0);",
							"});",
							"pm.test(\"Test dislikes count 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test initiator id 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test initiator rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.rate, '\"rate\" must be 0.0').to.eql(0.0);",
							"});",
							"pm.test(\"Test event rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.rate, '\"rate\" must be 0.0').to.eql(0.0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Повторное нажатие на дизлайк",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test likes 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes 'eventId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes 'userId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('userId');",
							"    pm.expect(jsonData.userId, '\"userId\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test likes 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be false').to.eql(false);",
							"});",
							"pm.test(\"Test likes 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be true').to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?dislike=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"rate"
					],
					"query": [
						{
							"key": "like",
							"value": "true",
							"disabled": true
						},
						{
							"key": "dislike",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос события . Поставлена повторная оценка событию - дизлайк",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test Event 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes count 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be 0').to.eql(0);",
							"});",
							"pm.test(\"Test dislikes count 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 0').to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление лайка событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test likes 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test likes 'eventId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes 'userId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('userId');",
							"    pm.expect(jsonData.userId, '\"userId\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test likes 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be true').to.eql(true);",
							"});",
							"pm.test(\"Test likes 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be false').to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?like=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"rate"
					],
					"query": [
						{
							"key": "like",
							"value": "true"
						},
						{
							"key": "dislike",
							"value": "true",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос события . Поставлена оценка событию - лайк",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test Event 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes count 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test dislikes count 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 0').to.eql(0);",
							"});",
							"pm.test(\"Test initiator id 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test initiator rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.rate, '\"rate\" must be 0.0').to.eql(100.0);",
							"});",
							"pm.test(\"Test event rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.rate, '\"rate\" must be 0.0').to.eql(100.0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Повторное добавление лайка событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test likes 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test likes 'eventId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes 'userId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('userId');",
							"    pm.expect(jsonData.userId, '\"userId\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test likes 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be true').to.eql(true);",
							"});",
							"pm.test(\"Test likes 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be false').to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?like=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"rate"
					],
					"query": [
						{
							"key": "like",
							"value": "true"
						},
						{
							"key": "dislike",
							"value": "true",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос события . Поставлена повторная оценка событию - лайк",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test Event 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes count 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be 0').to.eql(0);",
							"});",
							"pm.test(\"Test dislikes count 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 0').to.eql(0);",
							"});",
							"pm.test(\"Test initiator id 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test initiator rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.rate, '\"rate\" must be 0.0').to.eql(0.0);",
							"});",
							"pm.test(\"Test event rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.rate, '\"rate\" must be 0.0').to.eql(0.0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление дизлайка событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test likes 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test likes 'eventId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes 'userId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('userId');",
							"    pm.expect(jsonData.userId, '\"userId\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test likes 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be false').to.eql(false);",
							"});",
							"pm.test(\"Test likes 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be true').to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?dislike=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"rate"
					],
					"query": [
						{
							"key": "like",
							"value": "true",
							"disabled": true
						},
						{
							"key": "dislike",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос события . Поставлена оценка событию дизлайк",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test Event 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes count 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be 0').to.eql(0);",
							"});",
							"pm.test(\"Test dislikes count 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 1').to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление лайка событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test likes 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test likes 'eventId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes 'userId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('userId');",
							"    pm.expect(jsonData.userId, '\"userId\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test likes 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be true').to.eql(true);",
							"});",
							"pm.test(\"Test likes 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be false').to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?like=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"rate"
					],
					"query": [
						{
							"key": "like",
							"value": "true"
						},
						{
							"key": "dislike",
							"value": "true",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос события . Поставлена оценка событию - лайк",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test Event 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes count 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test dislikes count 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 0').to.eql(0);",
							"});",
							"pm.test(\"Test initiator id 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test initiator rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.rate, '\"rate\" must be 100.0').to.eql(100.0);",
							"});",
							"pm.test(\"Test event rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.rate, '\"rate\" must be 100.0').to.eql(100.0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление дизлайка событию вторым пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test likes 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);",
							"});",
							"pm.test(\"Test likes 'eventId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes 'userId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('userId');",
							"    pm.expect(jsonData.userId, '\"userId\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test likes 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be false').to.eql(false);",
							"});",
							"pm.test(\"Test likes 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be true').to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?dislike=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"rate"
					],
					"query": [
						{
							"key": "like",
							"value": "true",
							"disabled": true
						},
						{
							"key": "dislike",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос события . Поставлена две оценки",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test Event 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes count 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test dislikes count 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test initiator id 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test initiator rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.rate, '\"rate\" must be 50.0').to.eql(50.0);",
							"});",
							"pm.test(\"Test event rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.rate, '\"rate\" must be 50.0').to.eql(50.0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление события для юзера 3",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n  \"category\": 2,\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление лайка событию Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test likes 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);",
							"});",
							"pm.test(\"Test likes 'eventId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 35').to.eql(35);",
							"});",
							"pm.test(\"Test likes 'userId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('userId');",
							"    pm.expect(jsonData.userId, '\"userId\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test likes 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be true').to.eql(true);",
							"});",
							"pm.test(\"Test likes 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be false').to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?like=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"rate"
					],
					"query": [
						{
							"key": "like",
							"value": "true"
						},
						{
							"key": "dislike",
							"value": "true",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "eventId",
							"value": "35"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос события . Рейтинга юзера должен быть 50",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test Event 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes count 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test dislikes count 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test initiator id 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.initiator.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test event rate 'rate' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.rate, '\"rate\" must be 50.0').to.eql(50.0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление лайка событию Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test likes 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 6').to.eql(6);",
							"});",
							"pm.test(\"Test likes 'eventId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test likes 'userId' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('userId');",
							"    pm.expect(jsonData.userId, '\"userId\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test likes 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('likes');",
							"    pm.expect(jsonData.likes, '\"likes\" must be true').to.eql(true);",
							"});",
							"pm.test(\"Test likes 'dislikes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('dislikes');",
							"    pm.expect(jsonData.dislikes, '\"dislikes\" must be false').to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?like=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"rate"
					],
					"query": [
						{
							"key": "like",
							"value": "true"
						},
						{
							"key": "dislike",
							"value": "true",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос событий c сортировкой рейтинга",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Has user create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test Event 'rate' field first event\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('rate');",
							"    pm.expect(jsonData[0].rate, '\"rate\" must be 100.0').to.eql(100.0);",
							"});",
							"pm.test(\"Test likes count 'likes' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[2]).to.have.property('rate');",
							"    pm.expect(jsonData[2].rate, '\"rate\" must be 50').to.eql(50);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/events?rate=desc&sort=VIEWS",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "rate",
							"value": "desc"
						},
						{
							"key": "sort",
							"value": "VIEWS"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}